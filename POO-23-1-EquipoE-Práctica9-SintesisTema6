# PATRONES DE DISEÑO
## ¿Qué son?
### Descripciones de clases y objetos relacionados 
### Resuelve situaciones diferentes mediante sus clases y objetos abstraidos

## Elementos esenciales
### Nombre
#### Ayuda a describir el problema de diseño, soluciones y consecuencias
### Problema
#### Describe las circunstancias para poder aplicar el patrón, el contexto idóneo para usarlo
### Solución
#### Describe cada uno de los elementos que son participes en el patrón de diseño
### Consecuencias
#### Describe los resultados, ventajas y desventajas al aplicar el patrón de diseño


## Tipos
### Creacionales
#### Abstraen el proceso de creación de objetos
#### Resuelven problemas recurrentes
#### Ayudan a diseñar clases en forma independiente a como los objetos son creados, compuestos y representados
##### Factory
###### Interfaz abstracta para crear un objeto

##### Abstract Factory
###### Busca definir una interfaz abstracta para crear una familia de objetos

##### Builder
###### Busca encapsular los detalles de la construcción de objetos

##### Prototype
###### Permite crear otros objetos mediante copias del objeto prototipo y haciendo modificaciones

##### Singleton
###### Garantiza que una clase sólo tenga una instancia y proporciona un punto de acceso global a ella

### Estructurales
#### Describen formas de agrupar objetos para crear nuevas funcionalidades
#### Usan la herencia para formar interfaces o implementaciones
#### Tratan con objetos que delegan responsabilidades a otros objetos
##### Decorator
###### Extienden la funcionalidad de un objeto de manera dinámica

##### Adapter
###### Transforma una interfaz de una clase en otra

##### Facade
###### Interactua en forma centralizada con un subsitema de clases

##### Proxy
###### Permite proporcionar un sustituto o marcador de posición para otro objeto

##### Bridge
###### Permite desacoplar la abstracción de eda jerarquía de su implementación

##### Virtual Proxy
###### Técnica de ahorro de memoria que propone posponer la creación de un objeto costoso

##### Counting Proxy
###### Útil para diseñar un conjunto de operacionestales como registro y conteo

##### Aggregate Enforcer (Supervisor Agregado)
###### Recomienda que cuando un objeto agregado es construido, debe ser creado completamente

##### Object Cache
###### Sugiere mantener una copia de un objeto en la memoria

##### Composite (Compuesto)
###### Permite a un objeto cliente tratar de manera idéntica a componentes individuales y compuestos

##### Flyweight (Peso mosca)
###### Sugiere separar todos los datos comunes en varios objetos

### De comportamiento
#### Relacionados con los algoritmos 
#### Relacionados con la asignación de responsabilidades entre los objetos
#### Describren los patrones de cómo estos se comunican
##### Iterator
###### Permite a los objetos clientes acceder al contenido a una colección de objetos de manera secuencial sin conocer la estructura interna

##### Visitor (Visitante)
###### útil para diseñar una operación a través de una colección heterogénea de objetos de una jerarquía de clases

##### Command (Comando)
###### Permite encapsular órdenes de tal forma que se independiza la clase cliente de quien reciba la solicitud

##### Mediator
###### Útil para diseñar una comunicación controlada y coordinada enre los grupos de objetos

##### Chain of Responsibility (Cadena de responsabilidad)
###### Cuando hay más de un objeto que puede administrar o atender una solicitud de un cliente

##### Memento
###### Útil para diseñar un mecanismo que permita capturar y guardar el estado de un objeto

##### Observer
###### Útil para diseñar un modelo de comunicación entre un conjunto de objetos independientes

##### Interpreter
###### Útil interpretar una combinación de reglas gramaticales de un lenguaje

##### State
###### útil en el diseño de la estructura eficiente de una clase

##### Strategy
###### Útil cuando hay un conjunto de algoritmos relacionados

##### Null Object
###### Elimina la necesidad que tiene un cliente de verificar si el objeto devuelto es null

##### Template Method
###### Utilizado en situaciones cuando hay un algoritmo

##### Object Authenticator (Objeto autenticador)
###### Permite restringir la accesibilidad de un objeto solamente a un conjunto limitado de objetos clientes

##### Common Attribute Registry -CAR-
###### Ofrece métodos para permitir a los objetos de las aplicaciones establecer y recibir diferentes valores de atributos de manera no persistente

## Clasificación de patrones
### De diseño
#### Son patrones de nivel de abstracción alto y las piezas concretas de la solución

### De arquitectura
#### Especifican una serie de subsistemas y sus responsabilidades respectivas, incluyendo tacticas y estrategias para organizar las relaciones existentes entre ellos

### Elementales (Idioms)
#### Patrones directamente involucrados en la codificación

## Antipatrones
### Son ejemplos para un pésimo diseño de software
#### Lava flow
##### Suele construir cantidaes de código sin orden en específico

#### The God
##### Una sola clase se encarga de aplicar todos los metodos en un solo archivo

#### Golden Hammer
##### Usa un solo paradigma sin importar si es el mas eficiente o no

#### Spaguetti code
##### Programas vulnerables al mínimo cambio

#### Fantasmas
##### Programas con varias clases con mínimas o nulas responsabilidades

## Modelo vista controlador (MVC)
### El modelo es el objeto de aplicación
### La vista es su representación en pantalla
### El controlador define el modo en que la interfaz reacciona a la entrada del usuario
### MVC separa los diseños de interfaces de usuarios para incrementar la flexibilidad y reutilización
### MVC desacopla las vistas de los modelos estableciendo entre ellos un protocolo de notificación